<?php

// Load the Sermepa Payment statuses.
module_load_include('inc', 'sermepa_payment', 'inc/sermepa_payment.statuses');


/**
 * Implements hook_payment_method_controller_info().
 */
function sermepa_payment_payment_method_controller_info() {
  return array('SermepaPaymentMethodController');
}


/**
 * Implements hook_menu().
 */
function sermepa_payment_menu() {
  return array(
    'sermepa/callback/%entity_object' => array(
      'load arguments'  => array('payment'),
      'title'           => 'Go to payment server',
      'page callback'   => 'sermepa_payment_callback',
      'page arguments'  => array(2),
      'access callback' => 'sermepa_payment_access_callback',
      'access arguments'=> array(2),
      'type'            => MENU_CALLBACK,
    ),
    'sermepa/redirect/%entity_object' => array(
      'load arguments'  => array('payment'),
      'title'           => 'Go to payment server',
      'page callback'   => 'drupal_get_form',
      'page arguments'  => array('sermepa_payment_form_redirect', 2),
      'access callback' => true,
      'type'            => MENU_CALLBACK,
    ),
    'sermepa/return/%entity_object' => array(
      'load arguments'  => array('payment'),
      'title'           => 'Payment finished',
      'page callback'   => 'sermepa_payment_return',
      'page arguments'  => array(2),
      'access callback' => true,
    ),
    'sermepa/failed/%entity_object' => array(
      'load arguments'  => array('payment'),
      'title'           => 'Payment failed',
      'page callback'   => 'sermepa_payment_failed',
      'page arguments'  => array(2),
      'access callback' => true,
    ),
  );
}


function sermepa_payment_callback(Payment $payment) {
  $sermepa = SermepaPaymentMethodController::createGateway($payment);
  $amount = $payment->totalAmount(false) * 100;
  // The feedback has been validated in the access_callback function.  We know
  // it is safe to manipulate it.
  $feedback = $sermepa->getFeedback();
  $response = $feedback['Ds_Response'];
  set_payment_final_status($response, $payment);
}


function sermepa_payment_access_callback(Payment $payment) {
  $sermepa = SermepaPaymentMethodController::createGateway($payment);
  $amount = $payment->totalAmount(false) * 100;
  $feedback = $sermepa->getFeedback();

  if ($sermepa->validSignatures($feedback)) {
    watchdog('sermepa_payment', "Feedback for payment {$payment->pid} was valid. Access authorized.");
    return true;
  } else {
    watchdog('sermepa_payment', "Feedback for payment {$payment->pid} was NOT valid.\nAcces NOT authorized.");
    return false;
  }
}


function sermepa_payment_return(Payment $payment) {
  watchdog('sermepa_payment', "Transaction for payment {$payment->pid} was authorized.");
  $payment->finish();
}

function sermepa_payment_failed(Payment $payment) {
  watchdog('sermepa_payment', "Transaction for payment {$payment->pid} was NOT authorized.");
  $payment->finish();
}


function sermepa_payment_form_redirect(array $form, array &$form_state, Payment $payment) {
  $form = new SermepaPaymentForm($payment);
  return $form->submit('sermepa-payment-form-redirect');
}


/**
 * Form build callback: implements
 * PaymentMethodController::payment_method_configuration_form_elements_callback.
 */
function sermepa_payment_method_configuration(array $form, array &$form_state) {
  $method = $form_state['payment_method'];
  $new_values = $method->controller_data;
  $default_values = $method->controller->controller_data_defaults;
  $values = array_merge($default_values, $new_values);

  $form = new SermepaSettingsForm();
  return $form->create($values);
}


/**
 * Implements form validate callback for sermepa_payment_method_configuration().
 */
function sermepa_payment_method_configuration_validate(array $form, array &$form_state) {
  $values = $form_state['input']['controller_form'];
  $method = $form_state['payment_method'];

  $form = new SermepaSettingsForm();
  $form->validate($method, $values);
}



/**
 * Implements hook_entity_load().
 */
function sermepa_payment_entity_load($entities, $type) {
  if ($type == 'payment_method') {
    SermepaEntityCRUD::load($entities);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function sermepa_payment_payment_method_insert(PaymentMethod $method) {
  if ($method->controller->name == 'SermepaPaymentMethodController') {
    SermepaEntityCRUD::insert($method);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function sermepa_payment_payment_method_update(PaymentMethod $method) {
  if ($method->controller->name == 'SermepaPaymentMethodController') {
    SermepaEntityCRUD::update($method);
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function sermepa_payment_payment_method_delete(PaymentMethod $method) {
  if ($method->controller->name == 'SermepaPaymentMethodController') {
    SermepaEntityCRUD::delete($method);
  }
}


function set_payment_final_status($response, $payment) {
  if ((int) $response <= 99) {
    $payment->setStatus(new PaymentStatusItem(PAYMENT_STATUS_SUCCESS));
  }
  else {
    $payment->setStatus(new PaymentStatusItem(PAYMENT_STATUS_FAILED));
    switch ((int) $response) {
      case 900:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_RETURNS_CONFIRMATIONS));
        break;

      case 101:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_EXPIRED));
        break;

      case 102:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_EXCEPTION_CARD));
        break;

      case 104:
      case 9104:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_NOT_ALLOWED));
        break;

      case 116:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_INSUFFICIENT));
        break;

      case 118:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_UNREGISTERED));
        break;

      case 129:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_SECURITY_CODE));
        break;

      case 180:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_OUT_OF_SERVICE));
        break;

      case 184:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_OWNER_AUTHENTICATION));
        break;

      case 190:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_NO_REASONS));
        break;

      case 191:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_WRONG_EXPIRATION));
        break;

      case 202:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_FRAUD));
        break;

      case 912:
      case 9912:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_ISSUER_UNAVAILABLE));
        break;

      case 913:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_ORDER_DUPLICATED));
        break;

      default:
        $payment->setStatus(new PaymentStatusItem(SERMEPA_PAYMENT_STATUS_TRANSACTION_REFUSED));
        break;
    }
  }

  entity_save('payment', $payment);
}
